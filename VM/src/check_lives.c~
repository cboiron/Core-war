/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   check_lives.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: cboiron <marvin@42.fr>                     +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2018/04/14 15:45:05 by cboiron           #+#    #+#             */
/*   Updated: 2018/05/03 11:09:36 by cboiron          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "corewar.h"

void	kill_process(t_proc *proc, t_proc **list)
{
	t_proc	*tmp;
	t_proc *previous;
	t_proc *nextone;

	printf("debut kill process\n");
	tmp = NULL;
	tmp = *list;
	if (proc == *list)
	{
		printf("debut if1\n");
		if ((*list)->next != NULL)
		{
			printf("debut if2\n");
			tmp = *list;
			*list = (*list)->next;
			ft_memdel((void**)&tmp);
		}
		else
		{
			printf("le vainqueur est le joueur numero : %d\n", proc->id);
			ft_memdel((void**)list);
		}
	}
	else
	{
		printf("debut_else\n");
		while (tmp != proc && tmp)
		{
				//tmp->next = proc->next;
				//ft_memdel((void**)&tmp);
			//if (tmp->next != NULL)
				tmp = tmp->next;
			//else
			//	break ;
		}
		printf("before\n");
		previous = tmp;
		if (tmp->next)
		{
			tmp = tmp->next;
			if (tmp->next)
				nextone = tmp->next;
			else
				nextone = NULL;
		previous->next = nextone;
		}
		else 
			return ;
		free(tmp);
		printf("after\n");
	}
}

void	check_lives(t_vm *vm, t_proc **list)
{
	t_proc	*tmp;

	tmp = *list;
	while (tmp->next)
	{
		printf("begin_While | id : %d\n", tmp->id);
		if (tmp == NULL)
		{
			printf("fykdxfyugcihj\n");
			break;
		}
		printf("tmp_existing| live period");
		if (tmp->live_period == 0)
		{
			printf("before calling to kill process\n");
			kill_process(tmp, list);
		}
		else
		{
			printf("before live_period => 0\n");
			tmp->live_period = 0;
		}
		printf("cctoi\n");
		if (tmp->next == NULL)
			break;
		tmp = tmp->next;
		printf("asfdgdhfjgk\n");
	}
	printf("before checking list existance\n");
	if (!(*list))
	{
		ft_putendl("Tous les joueurs sont morts");
		exit(1);
	}
	printf("after checking list existance\n");
	if (vm->total_lives_period > NBR_LIVE ||
			vm->last_check == MAX_CHECKS)
	{
		vm->cycle_to_die -= CYCLE_DELTA;
		vm->last_check = 0;
		vm->total_lives_period = 0;
	}
	else
		vm->last_check++;
	vm->cycle_before_checking = vm->cycle_to_die;
	printf("end of check lives\n");
}
